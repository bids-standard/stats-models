{
  "title": "BIDSStatsModel",
  "description": "A BIDS Stats Model is a JSON file that defines one or more hierarchical models\non brain imaging data.\n\nA hierarchical model is a sequence of estimator **nodes**. These nodes are connected\nvia **edges** to form a directed, acyclic graph. The graph contains a single \"root\"\nnode, which only has outgoing edges, and may have many \"leaf\" nodes that only have\nincoming edges. Each path from the root to a leaf may be thought of as a single\nhierarchical model.",
  "type": "object",
  "properties": {
    "Description": {
      "title": "Description",
      "type": "string"
    },
    "Name": {
      "title": "Name",
      "type": "string"
    },
    "BIDSModelVersion": {
      "title": "Bidsmodelversion",
      "type": "string"
    },
    "Input": {
      "title": "Input",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {}
      }
    },
    "Nodes": {
      "title": "Nodes",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Node"
      }
    },
    "Edges": {
      "title": "Edges",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Edge"
      }
    }
  },
  "required": [
    "Name",
    "BIDSModelVersion",
    "Nodes"
  ],
  "definitions": {
    "Transformations": {
      "title": "Transformations",
      "description": "Transformations describe modifications of variables to prepare a design matrix.\n\nThis field is indirect, with a :py:attr:`Transformer` name identifying an instruction\nset, and a sequence of :py:attr:`Instructions`.\n\nA Transformer accepts data frames of sparse (onset, duration, amplitude) and\ndense (onset, sampling rate, values) variables along with the list of Instructions,\nand then return a new set of sparse and/or dense variables.\n\nExamples\n--------\n\n.. code-block:: json\n\n   {\n     \"Transformer\": \"pybids-transforms-v1\",\n     \"Instructions\": [\n       {\n         \"Name\": \"Factor\",\n         \"Input\": [\"trial_type\"]\n       },\n       {\n         \"Name\": \"Convolve\",\n         \"Model\": \"spm\",\n         \"Input\": [\"trial_type.cond1\", \"trial_type.cond2\"]\n       }\n     ]\n   }",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Transformer": {
          "title": "Transformer",
          "enum": [
            "pybids-transforms-v1"
          ],
          "type": "string"
        },
        "Instructions": {
          "title": "Instructions",
          "type": "array",
          "items": {}
        }
      },
      "required": [
        "Transformer",
        "Instructions"
      ]
    },
    "HRF": {
      "title": "HRF",
      "description": "Specification of a hemodynamic response function (HRF) model.\n\nMost design matrix constructors permit sparse events of the form\n(onset, duration, amplitude) to be convolved by a named HRF,\npossibly with some parameters.\nSome may permit dense time series to be convolved as well.\n\nThis specification makes no attempt to constrain the names and parameters,\nor require consistency of accepted model names across implementations.\nImplementations SHOULD fail if the model is unknown.\n\nExamples\n--------\n\nThe \"canonical\" HRF defined in SPM:\n\n.. code-block:: json\n\n    {\n      \"Variables\": [\"condition1\", \"condition2\"],\n      \"Model\": \"spm\"\n    }",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Variables": {
          "title": "Variables",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Model": {
          "title": "Model",
          "type": "string"
        },
        "Parameters": {
          "title": "Parameters",
          "type": "object"
        }
      },
      "required": [
        "Variables",
        "Model"
      ]
    },
    "Options": {
      "title": "Options",
      "description": "Estimation options that are common to multiple estimation packages.",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "HighPassFilterCutoffHz": {
          "title": "Highpassfiltercutoffhz",
          "type": "number"
        },
        "LowPassFilterCutoffHz": {
          "title": "Lowpassfiltercutoffhz",
          "type": "number"
        },
        "ReplaceVariables": {
          "title": "Replacevariables",
          "type": "object"
        },
        "Mask": {
          "title": "Mask",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {}
          }
        },
        "Aggregate": {
          "title": "Aggregate",
          "enum": [
            "none",
            "mean",
            "pca"
          ],
          "type": "string"
        }
      }
    },
    "Model": {
      "title": "Model",
      "description": "The model to fit to the collection of input images.\n\nThis section defines the design matrix construction, estimator type,\nand additional options needed to estimate the model parameters.",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Type": {
          "title": "Type",
          "enum": [
            "glm",
            "meta"
          ],
          "type": "string"
        },
        "X": {
          "title": "X",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "enum": [
                  1
                ],
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "Formula": {
          "title": "Formula",
          "type": "string"
        },
        "HRF": {
          "$ref": "#/definitions/HRF"
        },
        "Options": {
          "$ref": "#/definitions/Options"
        },
        "Software": {
          "title": "Software",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "required": [
        "Type",
        "X"
      ]
    },
    "Contrast": {
      "title": "Contrast",
      "description": "Contrasts are weighted sums of parameter estimates (betas) generated by a model fit.\n\n``Contrast`` defines the structure of the elements of the :py:attr:`Node.Contrasts` list.\n\nAlong with :py:class:`DummyContrasts`, Contrasts define the outputs of a :py:class:`Node`.\n\nWhile ``\"t\"`` and ``\"pass\"`` contrasts are passed as inputs to the next node, ``\"F\"``\ncontrasts are terminal and are not passed as inputs to following :py:class:`Node`\\s.\n\nExamples\n--------\n\nSubtract two conditions:\n\n.. code-block:: json\n\n    {\n      \"Name\": \"a_vs_b\",\n      \"ConditionList\": [\"A\", \"B\"],\n      \"Weights\": [1, -1],\n      \"Test\": \"t\"\n    }\n\nContrast one condition to the average of two others:\n\n.. code-block:: json\n\n    {\n      \"Name\": \"a_vs_other\",\n      \"ConditionList\": [\"A\", \"B\", \"C\"],\n      \"Weights\": [1, -0.5, -0.5],\n      \"Test\": \"t\"\n    }\n\nTo pass an individual parameter estimate without changing its name to following nodes:\n\n.. code-block:: json\n\n    {\"Name\": \"A\", \"ConditionList\": [\"A\"], \"Weights\": [1], \"Test\": \"t\"}",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Name": {
          "title": "Name",
          "type": "string"
        },
        "ConditionList": {
          "title": "Conditionlist",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "enum": [
                  1
                ],
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "Weights": {
          "title": "Weights",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            }
          ]
        },
        "Test": {
          "title": "Test",
          "enum": [
            "pass",
            "t",
            "F"
          ],
          "type": "string"
        }
      },
      "required": [
        "Name",
        "ConditionList",
        "Weights",
        "Test"
      ]
    },
    "DummyContrasts": {
      "title": "DummyContrasts",
      "description": "Dummy contrasts are contrasts with one condition, a weight of one,\nand the same name as the condition. That is,\n\n::\n\n    \"DummyContrasts\": {\"Contrasts\": [\"A\", \"B\"], \"Test\": \"t\"}\n\nis equivalent to the following list of :py:class:`Contrast`\\s::\n\n    \"Contrasts\": [\n        {\"Name\": \"A\", \"ConditionList\": [\"A\"], \"Weights\": [1], \"Test\": \"t\"}\n        {\"Name\": \"B\", \"ConditionList\": [\"B\"], \"Weights\": [1], \"Test\": \"t\"}\n    ]\n\nWhile ``\"t\"`` and ``\"pass\"`` contrasts are passed as inputs to the next node, ``\"F\"``\ncontrasts are terminal and are not passed as inputs to following :py:class:`Node`\\s.",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Contrasts": {
          "title": "Contrasts",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "enum": [
                  1
                ],
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "Test": {
          "title": "Test",
          "enum": [
            "pass",
            "t",
            "F"
          ],
          "type": "string"
        }
      },
      "required": [
        "Test"
      ]
    },
    "Node": {
      "title": "Node",
      "description": "A node represents an estimator that applies to a given level of analysis.\nIt contains sufficient information to construct a design matrix, estimate\nparameter weights (betas) and construct contrasts.",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Level": {
          "title": "Level",
          "enum": [
            "Run",
            "Session",
            "Subject",
            "Dataset"
          ],
          "type": "string"
        },
        "Name": {
          "title": "Name",
          "type": "string"
        },
        "GroupBy": {
          "title": "Groupby",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Transformations": {
          "$ref": "#/definitions/Transformations"
        },
        "Model": {
          "$ref": "#/definitions/Model"
        },
        "Contrasts": {
          "title": "Contrasts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contrast"
          }
        },
        "DummyContrasts": {
          "$ref": "#/definitions/DummyContrasts"
        }
      },
      "required": [
        "Level",
        "Name",
        "GroupBy",
        "Model"
      ]
    },
    "Edge": {
      "title": "Edge",
      "description": "An Edge connects two :py:class:`Node`\\s, indicating the outputs (contrasts) of\nthe :py:attr:`Source` Node are to be made available as inputs to the\n:py:attr:`Destination` Node.\n\nContrasts may be filtered by any metadata field, including entities.\nEach contrast has an additional entity ``\"contrast\"`` that may be used to filter contrasts by name.\n\nExamples\n--------\n\n.. code-block:: json\n\n   {\n     \"Source\": \"subject\",\n     \"Destination\": \"dataset\"\n   }\n\n.. code-block:: json\n\n   {\n     \"Source\": \"subject\",\n     \"Destination\": \"dataset\",\n     \"Filter\": {\"contrast\": [\"contrast1\", \"contrast2\"]}\n   }",
      "type": "object",
      "properties": {
        "Description": {
          "title": "Description",
          "type": "string"
        },
        "Source": {
          "title": "Source",
          "type": "string"
        },
        "Destination": {
          "title": "Destination",
          "type": "string"
        },
        "Filter": {
          "title": "Filter",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {}
          }
        }
      },
      "required": [
        "Source",
        "Destination"
      ]
    }
  }
}